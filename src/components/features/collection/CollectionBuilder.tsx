import { Badge, IconButton, Typography } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import CollectionViewer from "./CollectionViewer";
import { useState } from "react";
import { CreateCollectionDialog } from "./CollectionController";
import {
  AttributeSettingTypes,
  TypeSetting,
} from "../../../models/share/collection/AttributeTypeSettings";
import { CollectionForm } from "../../../models/share/collection/CollectionForm";
import ShortUniqueId from "short-unique-id";

interface ICollectionBuilder {
  reset(): CollectionBuilder;
  setCollectionBase(name: string, description: string): CollectionBuilder;
  addAttributeTypeSetting(type: AttributeSettingTypes): CollectionBuilder;
  build(): CollectionBuilder;
}

export class CollectionBuilder implements ICollectionBuilder {
  private form: CollectionForm = new CollectionForm();

  public get collectionForm(): CollectionForm {
    return this.form;
  }

  reset(): CollectionBuilder {
    this.form = new CollectionForm();
    return this;
  }

  /**
   * Creates a unique name by appending a unique identifier to the given name.
   * The unique identifier is generated using the ShortUniqueId library.
   *
   * @param name - The base name to create a unique name from.
   * @returns The unique name generated by appending a unique identifier to the base name.
   *
   * @remarks
   * The unique identifier is generated using the "alpha_lower" dictionary.
   * The collision probability of the generated unique name depends on the length of the unique identifier.
   * The longer the unique identifier, the lower the collision probability.
   */
  private createUniqueName(name: string): string {
    const uid = new ShortUniqueId({
      dictionary: "alpha_lower",
      length: 8,
    });

    return name + "_" + uid.rnd();
  }
  setCollectionBase(name: string, description?: string): CollectionBuilder {
    this.form.collectionName = this.createUniqueName(name);
    this.form.info = { displayName: name, description: description };
    return this;
  }
  addAttributeTypeSetting(setting: AttributeSettingTypes): CollectionBuilder {
    this.form.attributes?.push(setting as TypeSetting);
    return this;
  }
  build(): CollectionBuilder {
    throw new Error("Method not implemented.");
  }
}
function CollectionBuilderComponent() {
  const [addCollectionDialogOpen, setAddCollectionDialogOpen] = useState(false);
  const handleAddCollectionClick = () => {
    setAddCollectionDialogOpen(true);
  };
  const handleCloseAddCollectionDialog = () => {
    setAddCollectionDialogOpen(false);
  };

  function AddCollection() {
    return (
      <div
        className="hover:bg-slate-200 hover:cursor-pointer rounded-md text-sky-600"
        onClick={handleAddCollectionClick}
      >
        <Typography variant="body1" sx={{ padding: 1 }}>
          + Create new collection
        </Typography>
      </div>
    );
  }

  return (
    <>
      <div className="flex flex-row h-full">
        <div className="basis-1/4 bg-slate-100 w-full">
          <div className="flex flex-col">
            <div className="flex flex-row w-full gap-1 px-8 pt-8 pb-2 justify-between">
              <Badge badgeContent={4} color="primary">
                <Typography variant="h6">COLLECTION</Typography>
              </Badge>
              <IconButton>
                <SearchIcon />
              </IconButton>
            </div>

            <div className="flex flex-col gap-2 mx-8">
              <div className="hover:bg-slate-200 hover:cursor-pointer rounded-md">
                <Typography variant="body1" sx={{ padding: 1 }}>
                  Collection 1
                </Typography>
              </div>
              <AddCollection />
            </div>
          </div>
        </div>
        <div className="basis-3/4 bg-slate-50 w-full">
          <CollectionViewer title={"Test"} description="test" fields={""} />
        </div>
      </div>
      <CreateCollectionDialog
        open={addCollectionDialogOpen}
        onFinish={() => {}}
        onClose={handleCloseAddCollectionDialog}
      />
    </>
  );
}

export default CollectionBuilderComponent;
